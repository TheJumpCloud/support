version: 2.1
parameters:
  ManualBuild:
    description: "When `true`, pipeline will continue to build even if its been filtered out by config.yml (Will Not Run on Master Branch)"
    type: boolean
    default: false
  EnableDebugging:
    description: "When `true`, debugging commands will run and output to terminal."
    type: boolean
    default: true
  BuildModule:
    description: "When `true`, all build commands will run."
    type: boolean
    default: true
  BuildHelpFiles:
    description: "When `true`, Help files will be built."
    type: boolean
    default: true
  BuildTestFiles:
    description: "When `true`, Test files will be built."
    type: boolean
    default: true
  BuildNuspec:
    description: "When `true`, Nuspec will be built and pack/ push steps complete."
    type: boolean
    default: true
  ValidateModule:
    description: "When `true`, Pester Tests will be run for moduleValidation tags."
    type: boolean
    default: true
  ReleaseType:
    description: "Release Type. Accepted values [ Major, Minor, Patch ]"
    type: enum
    enum: ["Major", "Minor", "Patch"]
    default: "Minor"
  RequiredModulesRepo:
    description: "PowerShell Repository for JumpCloud SDKs"
    type: enum
    enum: ["PSGallery", "CodeArtifact"]
    default: "PSGallery"
  PowerShellModified:
    description: "Used by Path Filtering Orb to determine if changes occurred in the ./PowerShell/ folder"
    type: boolean
    default: false
  CommandsGalleryModified:
    description: "Used by Path Filtering Orb to determine if changes occurred in the ./PowerShell/JumpCloud Commands Gallery folder"
    type: boolean
    default: false
  PublishToPSGallery:
    description: "When `true` and when run against Master branch, this workflow will publish the latest code to PSGallery"
    type: boolean
    default: true
  ManualModuleVersion:
    description: "When `true` the pipeline will use the Module Version specified in JumpCloud Module JumpCloud.psd1 file"
    type: boolean
    default: false
orbs:
  win: circleci/windows@2.4.1
executors:
  macos_exec:
    macos:
      xcode: 13.2.1
    resource_class: macos.x86.medium.gen2
workflows:
  version: 2
  CommandsGalleryCI:
    when:
      and:
        - and:
            - not:
                matches:
                  pattern: "^master$"
                  value: << pipeline.git.branch >>
            - equal: [true, << pipeline.parameters.CommandsGalleryModified >>]
    jobs:
      - CommandsCI
  ci:
    when:
      and:
        - and:
            - not:
                matches:
                  pattern: "^master$"
                  value: << pipeline.git.branch >>
        - or:
            - equal: [true, << pipeline.parameters.PowerShellModified >>]
            - equal: [true, << pipeline.parameters.ManualBuild >>]
    jobs:
      - Initial Setup
      - Build Modules:
          requires:
            - Initial Setup
          context: aws-credentials
      - Build Help and Test Files:
          requires:
            - Build Modules
            - Initial Setup
          context: aws-credentials
      - Build Nuspec:
          requires:
            - Initial Setup
            - Build Modules
          context: aws-credentials
      - Invoke Git Commit:
          requires:
            - Initial Setup
            - Build Help and Test Files
            - Build Nuspec
      - Module Validation Tests:
          requires:
            - Initial Setup
            - Build Help and Test Files
            - Build Nuspec
            - Invoke Git Commit
          context: aws-credentials
      - Pester Tests Windows:
          requires:
            - Initial Setup
            - Build Help and Test Files
            - Build Nuspec
            - Invoke Git Commit
            - Module Validation Tests
          context: aws-credentials
      - Pester Tests Mac:
          requires:
            - Initial Setup
            - Build Help and Test Files
            - Build Nuspec
            - Invoke Git Commit
          context: aws-credentials
      - Pester Tests Linux:
          requires:
            - Initial Setup
            - Build Help and Test Files
            - Build Nuspec
            - Invoke Git Commit
          context: aws-credentials
      - Publish Module Validation:
          requires:
            - Initial Setup
            - Build Help and Test Files
            - Build Nuspec
            - Invoke Git Commit
  release:
    when:
      and:
        - equal: [master, << pipeline.git.branch >>]
        - equal: [true, << pipeline.parameters.PublishToPSGallery >>]
    jobs:
      - Prepare for release
      - draft-github-release:
          context: github-credentials-sa-releases
          requires:
            - Prepare for release
      - Approve Module:
          type: approval
          requires:
            - Prepare for release
      - Build Nuspec for PSGallery:
          requires:
            - Approve Module
      - Publish Module Validation:
          requires:
            - Build Nuspec for PSGallery
            - Approve Module
      - Publish Wiki Docs:
          requires:
            - Publish Module Validation
            - Approve Module
      - Invoke Git Commit:
          requires:
            - Publish Module Validation
            - Approve Module
jobs:
  CommandsCI:
    docker:
      - image: cimg/python:3.10.5
    steps:
      - validate-commands-gallery-headers
      - build-command-json
  Initial Setup:
    executor: win/default
    steps:
      - initial-setup
      - debugging
  Build Modules:
    executor: win/default
    steps:
      - build-module
  Build Help and Test Files:
    executor: win/default
    steps:
      - attach_workspace:
          at: .
      - build-helpfiles
      - build-testfiles
      - persist_to_workspace:
          root: .
          paths:
            - .
  Build Nuspec:
    executor: win/default
    steps:
      - deploy-nupkg:
          source: CodeArtifact
  Build Nuspec for PSGallery:
    executor: win/default
    steps:
      - deploy-nupkg:
          source: PSGallery
  Module Validation Tests:
    executor: win/default
    steps:
      - invoke-pester:
          JumpCloudApiKey: $env:XAPIKEY_PESTER
          JumpCloudApiKeyMsp: $env:XAPIKEY_PESTER_LINUX
          ExcludeTagList: "None"
          IncludeTagList: "ModuleValidation"
          RequiredModulesRepo: << pipeline.parameters.RequiredModulesRepo >>
  Publish Wiki Docs:
    executor: win/default
    steps:
      - publish-wiki
  Invoke Git Commit:
    executor: win/default
    steps:
      - invoke-script
  Pester Tests Windows:
    executor: win/default
    steps:
      - invoke-pester:
          JumpCloudApiKey: $env:XAPIKEY_PESTER
          JumpCloudApiKeyMsp: $env:XAPIKEY_PESTER_MTP
          ExcludeTagList: "ModuleValidation, JCDeployment"
          IncludeTagList: "*"
          RequiredModulesRepo: << pipeline.parameters.RequiredModulesRepo >>
          Shell: "pwsh.exe"
  Pester Tests Mac:
    executor: macos_exec
    steps:
      - setup-pester-env-mac
      - invoke-pester:
          JumpCloudApiKey: $env:XAPIKEY_PESTER_MAC
          JumpCloudApiKeyMsp: $env:XAPIKEY_PESTER_MTP
          ExcludeTagList: "ModuleValidation, JCDeployment"
          IncludeTagList: "*"
          RequiredModulesRepo: << pipeline.parameters.RequiredModulesRepo >>
          Shell: "pwsh"
  Pester Tests Linux:
    machine:
      image: ubuntu-2004:202201-02
    steps:
      - setup-pester-env-linux
      - invoke-pester:
          JumpCloudApiKey: $env:XAPIKEY_PESTER_LINUX
          JumpCloudApiKeyMsp: $env:XAPIKEY_PESTER_MTP
          ExcludeTagList: "ModuleValidation, JCDeployment"
          IncludeTagList: "*"
          RequiredModulesRepo: << pipeline.parameters.RequiredModulesRepo >>
          Shell: "pwsh"
  Publish Module Validation:
    machine:
      image: ubuntu-2004:202201-02
    steps:
      - validate-pipeline-param:
          branch: << pipeline.git.branch  >>
  Prepare for release:
    executor: win/default
    steps:
      - checkout
      - run:
          name: rename
          shell: pwsh.exe
          command: |
            $ErrorActionPreference = 'Stop'
            write-host "Preparring env to release JumpCloud Module"
            # Rename-Item -Path:("./PowerShell/JumpCloud Module") -NewName:("JumpCloud")
            $ModuleVersion = Import-PowerShellDataFile -Path:("./PowerShell/JumpCloud Module/JumpCloud.psd1")
            Write-Host "JumpCloud Module Version to release is: $($ModuleVersion.ModuleVersion)"
      - persist_to_workspace:
          root: .
          paths:
            - .
  draft-github-release:
    docker:
      - image: cibuilds/github:0.13
    steps:
      - attach_workspace:
          at: .
      - run:
          name: "Draft Release on GitHub"
          command: |
            # Module Version
            VERSION=$(grep -o '\d\+\.\d\+\.\d\+' /root/project/PowerShell/JumpCloud\ Module/JumpCloud.psd1)
            TITLE="JumpCloud PowerShell Module v$VERSION"
            # Get the changelog text between the latest release # and the next sequential "## SemanticVersionNumber"
            CHANGELOG=$(cat /root/project/PowerShell/ModuleChangelog.md |awk "/^## $VERSION/{ f = 1; next } /## [0-9]+.[0-9]+.[0-9]+/{ f = 0 } f")
            TAG="v$VERSION"
            BODY="$TITLE $CHANGELOG"
            # Post Draft Release
            ghr -t ${GITHUB_TOKEN} -u ${CIRCLE_PROJECT_USERNAME} -r ${CIRCLE_PROJECT_REPONAME} -c ${CIRCLE_SHA1} -n "$TITLE" -b "$BODY" -delete -draft "$TAG" /root/project/PowerShell/
commands:
  validate-commands-gallery-headers:
    steps:
      - checkout
      - run:
          name: Validate Commands Gallery Headers
          command: |
            python3 "./.circleci/scripts/validate_commands_gallery_md.py"
  build-command-json:
    steps:
      - add_ssh_keys:
          fingerprints:
            - "c9:0f:56:c9:00:42:98:3c:03:59:24:1e:a7:e7:08:7f"
      - checkout
      - run:
          name: Set URLs
          command: |
            python3 "./.circleci/scripts/setLinks.py"
      - run:
          name: Build Commands Json
          command: |
            python3 "./.circleci/scripts/parse_commands_to_json.py"
      - run:
          name: Commit Commands Json
          command: |
            git config user.email "$CIRCLE_PROJECT_USERNAME@CircleJC.com"
            git config user.name "$CIRCLE_PROJECT_USERNAME"
            git add -A
            status=$(git status)
            regex="nothing to commit"
            if [[ $status =~ $regex ]]; then
              echo "Nothing in branch to commit"
            else
              git commit -m "Updating Commands.json;[skip ci]"
              git push origin "$CIRCLE_BRANCH"
            fi
  initial-setup:
    steps:
      - checkout
      - run: echo << pipeline.git.branch >>
      - run:
          name: Install PowerShell Core
          command: dotnet tool install --global PowerShell --version 7.1.5
      - run:
          name: Install Modules
          shell: pwsh.exe
          command: |
            Install-Module JumpCloud.SDK.DirectoryInsights -Force
            Install-Module JumpCloud.SDK.V1 -Force
            Install-Module JumpCloud.SDK.V2 -Force
      - persist_to_workspace:
          root: .
          paths:
            - .
  debugging:
    steps:
      - when:
          condition:
            equal: [true, << pipeline.parameters.EnableDebugging >>]
          steps:
            - attach_workspace:
                at: .
            - run:
                name: Display Session Variables (For Debugging)
                shell: pwsh.exe
                command: |
                  ./PowerShell/Deploy/Get-SessionVariables.ps1
  build-module:
    steps:
      - when:
          condition:
            equal: [true, << pipeline.parameters.BuildModule >>]
          steps:
            - attach_workspace:
                at: .
            - run:
                name: Build Module
                shell: pwsh.exe
                command: |
                  $ErrorActionPreference = 'Stop'
                  ./PowerShell/Deploy/Build-Module.ps1 -GitSourceBranch << pipeline.git.branch >> -GitSourceRepo << pipeline.project.git_url >> -ReleaseType << pipeline.parameters.ReleaseType >> -ModuleName:('JumpCloud') -RequiredModulesRepo << pipeline.parameters.RequiredModulesRepo >> -ManualModuleVersion $<< pipeline.parameters.ManualModuleVersion >>
            - persist_to_workspace:
                root: .
                paths:
                  - .
  build-helpfiles:
    steps:
      - when:
          condition:
            equal: [true, << pipeline.parameters.BuildHelpFiles >>]
          steps:
            - run:
                name: Build Help Files
                shell: pwsh.exe
                command: |
                  $ErrorActionPreference = 'Stop'
                  ./PowerShell\Deploy\SdkSync\jcapiToSupportSync.ps1 -RequiredModulesRepo << pipeline.parameters.RequiredModulesRepo >>
                  ./PowerShell/Deploy/Build-HelpFiles.ps1 -ModuleName JumpCloud -ModulePath "./PowerShell/JumpCloud Module"
  build-testfiles:
    steps:
      - when:
          condition:
            equal: [true, << pipeline.parameters.BuildTestFiles >>]
          steps:
            - run:
                name: Build Test Files
                shell: pwsh.exe
                command: |
                  $ErrorActionPreference = 'Stop'
                  ./PowerShell/Deploy/Build-PesterTestFiles.ps1 -RequiredModulesRepo << pipeline.parameters.RequiredModulesRepo >>
  publish-wiki:
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints:
            - "c9:0f:56:c9:00:42:98:3c:03:59:24:1e:a7:e7:08:7f"
      - attach_workspace:
          at: .
      - run:
          name: "Publish Wiki Documentaiton"
          shell: pwsh.exe
          command: |
            Set-Location -Path "./PowerShell/Deploy/"
            ./Build-WikiPages.ps1
  invoke-script:
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints:
            - "c9:0f:56:c9:00:42:98:3c:03:59:24:1e:a7:e7:08:7f"
      - attach_workspace:
          at: .
      - run:
          when: on_success
          name: "Commit PowerShell Module to << pipeline.git.branch >>"
          shell: pwsh.exe
          command: |
            ssh-keyscan github.com >> ./.ssh/known_hosts
            $UserEmail = If ($env:CIRCLE_PROJECT_USERNAME) { $env:CIRCLE_PROJECT_USERNAME } Else { ($env:USERNAME).Replace(' ', '') + '@FakeEmail.com' }
            $UserName = If ($env:CIRCLE_PROJECT_USERNAME) { $env:CIRCLE_PROJECT_USERNAME } Else { $env:USERNAME }
            git config user.email "$UserEmail"
            git config user.name "$UserName"
            git pull
            git add -A
            git status
            git commit -m "Updating PowerShell Module;[skip ci]"
            git push origin << pipeline.git.branch >>
  deploy-nupkg:
    parameters:
      source:
        description: Name of the source to deploy to
        type: string
    steps:
      - when:
          condition:
            equal: [true, << pipeline.parameters.BuildNuspec >>]
          steps:
            - attach_workspace:
                at: .
            - run:
                name: Build Nuspec
                shell: pwsh.exe
                environment:
                  Source: << parameters.source >>
                command: |
                  $ErrorActionPreference = 'Stop'
                  . "./PowerShell/Deploy/BuildNuspecFromPsd1.ps1" -RequiredModulesRepo << pipeline.parameters.RequiredModulesRepo >>
            - run:
                name: Install Dependencies
                shell: pwsh.exe
                command: |
                  Install-Module -Name PowerShellGet -AllowPrerelease -Force
                  Install-Module -Name AWS.Tools.Common -Force
                  Install-Module -Name AWS.Tools.CodeArtifact -Force
            - run:
                name: Download Nuget
                command: |
                  if ( -not ( Test-Path -Path ./Deploy/utils ) ) {
                    mkdir ./Deploy/utils
                    wget https://dist.nuget.org/win-x86-commandline/latest/nuget.exe -Outfile ./Deploy/utils/nuget.exe
                  }
            - run:
                name: Add nuget sources
                shell: pwsh.exe
                command: |
                  Set-AWSCredential -AccessKey:($env:AWS_ACCESS_KEY_ID) -SecretKey:($env:AWS_SECRET_ACCESS_KEY)
                  $CARepoEndpoint = "$(Get-CARepositoryEndpoint -Domain jumpcloud-artifacts -Region us-east-1 -Repository jumpcloud-nuget-modules -Format nuget)v3/index.json"
                  dotnet nuget add source $CARepoEndpoint --name CodeArtifact --username aws --password (Get-CAAuthorizationToken -Domain:("jumpcloud-artifacts") -Region:("us-east-1")).AuthorizationToken
                  dotnet nuget add source "https://www.powershellgallery.com/api/v2/package" --name PSGallery
            - run:
                name: Pack nuspec
                shell: pwsh.exe
                command: |
                  ./Deploy/utils/nuget.exe pack "./PowerShell/JumpCloud Module/JumpCloud.nuspec" -Properties NoWarn=NU5111,NU5110
            - run:
                name: Publishing to "<< parameters.source >>" repo
                shell: pwsh.exe
                command: |
                  $NupkgPath = (Get-ChildItem -Path:("./*.nupkg")).FullName
                  If('<< parameters.source >>' -eq 'CodeArtifact'){dotnet nuget push $NupkgPath --source << parameters.source >>}
                  ElseIf('<< parameters.source >>' -eq 'PSGallery'){dotnet nuget push $NupkgPath --source << parameters.source >> --api-key $env:NuGetApiKey}
                  Else {Write-Error "Unknown source value: << parameters.source >>"}
            - persist_to_workspace:
                root: .
                paths:
                  - "./PowerShell/JumpCloud Module/JumpCloud.nuspec"
  invoke-pester:
    parameters:
      JumpCloudApiKey:
        type: string
        default: $env:XAPIKEY_PESTER
      JumpCloudApiKeyMsp:
        type: string
        default: $env:XAPIKEY_PESTER_MTP
      ExcludeTagList:
        type: string
        default: "None"
      IncludeTagList:
        type: string
        default: "None"
      RequiredModulesRepo:
        type: string
        default: "PSGallery"
      Shell:
        type: string
        default: "pwsh.exe"
    steps:
      - when:
          condition:
            equal: [true, << pipeline.parameters.ValidateModule >>]
          steps:
            - attach_workspace:
                at: .
            - run:
                name: Invoke Pester
                shell: << parameters.Shell >>
                no_output_timeout: 30m
                command: |
                  $ErrorActionPreference = 'stop'
                  ./PowerShell\Deploy\SdkSync\jcapiToSupportSync.ps1 -RequiredModulesRepo << pipeline.parameters.RequiredModulesRepo >>
                  . "./PowerShell/JumpCloud Module/Tests/InvokePester.ps1" -JumpCloudApiKey << parameters.JumpCloudApiKey >> -JumpCloudApiKeyMsp << parameters.JumpCloudApiKeyMsp >> -ExcludeTagList << parameters.ExcludeTagList >> -IncludeTagList << parameters.IncludeTagList >> -RequiredModulesRepo << parameters.RequiredModulesRepo >>
            - store_test_results:
                name: Uploading test results'
                path: "./PowerShell/JumpCloud Module/Tests/test_results/"
            - persist_to_workspace:
                root: .
                paths:
                  - .
  setup-pester-env-mac:
    steps:
      - run:
          name: Setup Pester Mac
          shell: bash
          command: |
            brew install --cask powershell
  setup-pester-env-linux:
    steps:
      - run:
          name: Setup Pester Linux
          shell: bash
          command: |
            # Update the list of packages
            sudo apt-get update
            # Install pre-requisite packages.
            sudo apt-get install -y wget apt-transport-https software-properties-common
            # Download the Microsoft repository GPG keys
            wget -q https://packages.microsoft.com/config/ubuntu/20.04/packages-microsoft-prod.deb
            # Register the Microsoft repository GPG keys
            sudo dpkg -i packages-microsoft-prod.deb
            # Update the list of products
            sudo apt-get update
            # Enable the "universe" repositories
            sudo add-apt-repository universe
            # Install PowerShell
            sudo apt-get install -y powershell
  validate-pipeline-param:
    parameters:
      branch:
        description: Name of the branch to deploy to
        type: string
    steps:
      - attach_workspace:
          at: .
      - run:
          name: Reset Publish To Gallery Param
          shell: bash
          environment:
            branch: << parameters.branch >>
          command: |
            sudo snap install yq
            publish=$(/snap/bin/yq e '.parameters.PublishToPSGallery.default' ~/project/.circleci/workflows.yml)
            if [[ $branch != 'master' ]]; then
                echo "Running on $branch, checking to see if PublishToPSGallery param is set..."
                if [[ $publish == "false" ]]; then
                  echo "CircleCI Param PublishToPSGallery is not set to 'true' (currently: $publish) - Module will not publish on merge to master"
                  exit 1
                elif [[ $publish == "true" ]]; then
                  echo "CircleCI Param PublishToPSGallery is set to 'true' - Module will publish on merge to master"
                fi
            fi
            if [[ $branch == 'master' ]]; then
                echo "Running on $branch, resetting PublishToPSGallery param..."
                /snap/bin/yq e '.parameters.ManualModuleVersion.default = false' -i ~/project/.circleci/workflows.yml
                /snap/bin/yq e '.parameters.PublishToPSGallery.default = false' -i ~/project/.circleci/workflows.yml
            fi
      - persist_to_workspace:
          root: .
          paths:
            - .
# VS Code Extension Version: 1.5.1
